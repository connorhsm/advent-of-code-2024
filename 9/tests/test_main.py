import pytest

from main import (
    calculate_checksum,
    compact_filesystem,
    expand_disk_map,
    alternative_compact_filesystem,
    get_block_size,
    swap_list_indicies,
)


@pytest.mark.parametrize(
    "input, expected",
    [
        (
            "2333133121414131402",
            [
                0,
                0,
                ".",
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                9,
                9,
            ],
        ),
        (
            "12345",
            [
                0,
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                ".",
                2,
                2,
                2,
                2,
                2,
            ],
        ),
        (
            "2121212121212121212121212121212121212121212",
            [
                0,
                0,
                ".",
                1,
                1,
                ".",
                2,
                2,
                ".",
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                ".",
                6,
                6,
                ".",
                7,
                7,
                ".",
                8,
                8,
                ".",
                9,
                9,
                ".",
                10,
                10,
                ".",
                11,
                11,
                ".",
                12,
                12,
                ".",
                13,
                13,
                ".",
                14,
                14,
                ".",
                15,
                15,
                ".",
                16,
                16,
                ".",
                17,
                17,
                ".",
                18,
                18,
                ".",
                19,
                19,
                ".",
                20,
                20,
                ".",
                21,
                21,
            ],
        ),
    ],
)
def test_expand_disk_map(input, expected):
    assert expand_disk_map(input) == expected


@pytest.mark.parametrize(
    "input, expected",
    [
        (
            [
                0,
                0,
                ".",
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                9,
                9,
            ],
            [
                0,
                0,
                9,
                9,
                8,
                1,
                1,
                1,
                8,
                8,
                8,
                2,
                7,
                7,
                7,
                3,
                3,
                3,
                6,
                4,
                4,
                6,
                5,
                5,
                5,
                5,
                6,
                6,
            ],
        ),
        (
            [
                0,
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                ".",
                2,
                2,
                2,
                2,
                2,
            ],
            [
                0,
                2,
                2,
                1,
                1,
                1,
                2,
                2,
                2,
            ],
        ),
        (
            [
                0,
                0,
                ".",
                1,
                1,
                ".",
                2,
                2,
                ".",
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                ".",
                6,
                6,
                ".",
                7,
                7,
                ".",
                8,
                8,
                ".",
                9,
                9,
                ".",
                10,
                10,
                ".",
                11,
                11,
                ".",
                12,
                12,
                ".",
                13,
                13,
                ".",
                14,
                14,
                ".",
                15,
                15,
                ".",
                16,
                16,
                ".",
                17,
                17,
                ".",
                18,
                18,
                ".",
                19,
                19,
                ".",
                20,
                20,
                ".",
                21,
                21,
            ],
            [
                0,
                0,
                21,
                1,
                1,
                21,
                2,
                2,
                20,
                3,
                3,
                20,
                4,
                4,
                19,
                5,
                5,
                19,
                6,
                6,
                18,
                7,
                7,
                18,
                8,
                8,
                17,
                9,
                9,
                17,
                10,
                10,
                16,
                11,
                11,
                16,
                12,
                12,
                15,
                13,
                13,
                15,
                14,
                14,
            ],
        ),
    ],
)
def test_compact_filesystem(input, expected):
    assert compact_filesystem(input) == expected


@pytest.mark.parametrize(
    "input, expected",
    [
        (
            [
                0,
                0,
                9,
                9,
                8,
                1,
                1,
                1,
                8,
                8,
                8,
                2,
                7,
                7,
                7,
                3,
                3,
                3,
                6,
                4,
                4,
                6,
                5,
                5,
                5,
                5,
                6,
                6,
            ],
            1928,
        ),
        (
            [
                0,
                2,
                2,
                1,
                1,
                1,
                2,
                2,
                2,
            ],
            60,
        ),
        (
            [
                0,
                0,
                9,
                9,
                2,
                1,
                1,
                1,
                7,
                7,
                7,
                ".",
                4,
                4,
                ".",
                3,
                3,
                3,
                ".",
                ".",
                ".",
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                ".",
                ".",
                ".",
                ".",
                8,
                8,
                8,
                8,
                ".",
                ".",
            ],
            2858,
        ),
    ],
)
def test_calculate_checksum(input, expected):
    assert calculate_checksum(input) == expected


@pytest.mark.skip
@pytest.mark.parametrize(
    "input, expected",
    [
        (
            [
                0,
                0,
                ".",
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                9,
                9,
            ],
            [
                0,
                0,
                9,
                9,
                2,
                1,
                1,
                1,
                7,
                7,
                7,
                ".",
                4,
                4,
                ".",
                3,
                3,
                3,
                ".",
                ".",
                ".",
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                ".",
                ".",
                ".",
                ".",
                8,
                8,
                8,
                8,
                ".",
                ".",
            ],
        )
    ],
)
def test_alternative_compact_filesystem(input, expected):
    assert alternative_compact_filesystem(input) == expected


@pytest.mark.parametrize(
    "input, index_input, expected",
    [
        (
            [
                1,
                1,
                1,
                2,
                2,
                1,
            ],
            0,
            3,
        ),
        (
            [
                2,
                1,
                1,
                1,
                2,
                2,
                1,
            ],
            4,
            2,
        ),
    ],
)
def test_get_block_size(input, index_input, expected):
    assert get_block_size(input, index_input) == expected


@pytest.mark.parametrize(
    "input, x, y, size, expected",
    [
        (
            [1, 1, ".", ".", 2, 2],
            0,
            4,
            2,
            [2, 2, ".", ".", 1, 1],
        ),
        (
            [1, 1, ".", ".", 2, 2],
            2,
            4,
            2,
            [1, 1, 2, 2, ".", "."],
        ),
        (
            [1, 1, ".", ".", 2, 2, 3, 3, 3, ".", ".", 5, 5, 5, ".", ".", 7, 7],
            11,
            6,
            3,
            [1, 1, ".", ".", 2, 2, 5, 5, 5, ".", ".", 3, 3, 3, ".", ".", 7, 7],
        ),
        (
            [1, 1, ".", ".", 2, 2, 3, 3, 3, ".", ".", 5, 5, 5, ".", ".", 7, 7],
            16,
            2,
            2,
            [1, 1, 7, 7, 2, 2, 3, 3, 3, ".", ".", 5, 5, 5, ".", ".", ".", "."],
        ),
        (
            [
                0,
                0,
                ".",
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                9,
                9,
            ],
            40,
            2,
            2,
            [
                0,
                0,
                9,
                9,
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                ".",
                ".",
            ],
        ),
        (
            [
                0,
                0,
                ".",
                ".",
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                9,
                9,
            ],
            2,
            40,
            2,
            [
                0,
                0,
                9,
                9,
                ".",
                1,
                1,
                1,
                ".",
                ".",
                ".",
                2,
                ".",
                ".",
                ".",
                3,
                3,
                3,
                ".",
                4,
                4,
                ".",
                5,
                5,
                5,
                5,
                ".",
                6,
                6,
                6,
                6,
                ".",
                7,
                7,
                7,
                ".",
                8,
                8,
                8,
                8,
                ".",
                ".",
            ],
        ),
    ],
)
def test_swap_list_indicies(input, x, y, size, expected):
    result = swap_list_indicies(input, x, y, size)

    assert result == expected
    assert len(result) == len(expected)
